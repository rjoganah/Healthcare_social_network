<?php

require_once dirname(__FILE__) . '/../lightmvc/ActionController.php';
require_once dirname(__FILE__) . '/../model/Members.php';
require_once dirname(__FILE__) . '/../model/Member.php';

class MembersController extends ActionController {

    /**
     * Simple index page which links to the main available actions
     */
    public function indexAction() {
// Do nothing
    }

    private function checkSSNAlreadyExist() {
        $pdo_options[PDO::ATTR_ERRMODE] = PDO::ERRMODE_EXCEPTION;
        $bdd = new PDO(DSN, DB_USERNAME, DB_PASSWORD, $pdo_options);
        $req = $bdd->prepare('select * from members where ssn = ' . $_POST['ssn']);
        $tab = $req->fetch();
        if (sizeof($tab) > 0) {

            return true;
        } else {

            return false;
        }
    }

    public function signupAction() {

        if (isset($_POST['ssnSignUp']) &&
                isset($_POST['firstnameSignUp']) &&
                isset($_POST['lastnameSignUp']) &&
                isset($_POST['monthSignUp']) &&
                isset($_POST['daySignUp']) &&
                isset($_POST['yearSignUp']) &&
                isset($_POST['sexSignUp']) &&
                isset($_POST['password1SignUp']) &&
                isset($_POST['password2SignUp']) &&
                isset($_POST['emailSignUp'])) {

            $this->msg = "";

            if ($this->checkSSNAlreadyExist() != true) {
                $newMember = new Member();
                $this->msg = "";

//$newMember->setPseudo($_POST['pseudo']);
                $newMember->setPassword($_POST['password1SignUp']);
                $newMember->setEmail($_POST['emailSignUp']);
                $newMember->setSex($_POST['sexSignUp']);

// use member : save
                $newMember->save();

// $this->newMember = $newMember;
            } else if ($this->checkSSNAlreadyExist() == true)
                $this->msg = "User Already Exist ";

            unset($_POST);
        }

        $tableau = array();
        $tableau[0] = 'none';
        $tableau[1] = 'none';
        $tableau[2] = 'none';
        $tableau[3] = 'none';

        $this->activeBar = $tableau;
    }

    public function signinAction() {
// use members : signin
        if (isset($_POST['email']) && isset($_POST['password'])) {
            $signInOkay = Members::signIn($_POST['email'], $_POST['password']);

            if ($signInOkay == TRUE) {
                $connectedMember = new Member($_POST['email']);

                $_SESSION['connected'] = TRUE;
                $_SESSION['email'] = $connectedMember->getEmail();
                $_SESSION['isAdmin'] = $connectedMember->isAdmin();
                $_SESSION['idMember'] = $connectedMember->getID();
                $_SESSION['firstname'] = $connectedMember->getFirstname();
                $_SESSION['lastname'] = $connectedMember->getLastname();

                unset($_POST);
                $this->redirect('/profile/view');
            } else {
                $_SESSION['connected'] = FALSE;
                $this->msgfailed = "connection failed";
            }
        }

        $tableau = array();
        $tableau[0] = 'none';
        $tableau[1] = 'none';
        $tableau[2] = 'none';
        $tableau[3] = 'none';

        $this->activeBar = $tableau;
    }

    public static function listAction() {
// use members : list
        if (isset($_SESSION['connected']) && $_SESSION['connected'] == TRUE && $_SESSION['isAdmin'] == 1) {
            return Members::getFrontProfiles(true);
        } else {
            return FALSE;
//$this->redirect('/members/signin');
        }
    }

    public function deleteAction() {
// use members: delete 
        if (isset($_SESSION['connected']) && $_SESSION['connected'] == TRUE && $_SESSION['isAdmin'] == 1) {
// TODO: Set an id as parameter
            Members::delete();
        }
        else
            $this->redirect('/members/signin');
    }

    public function logoutAction() {
        if ($_SESSION['connected'] == TRUE && isset($_SESSION['connected'])) {
            $_SESSION['connected'] = FALSE;
            session_destroy();
            $this->redirect('/index/index');
        }
    }

    public function addpatientAction() {

        $tableau = array();
        $tableau[0] = 'none';
        $tableau[1] = 'none';
        $tableau[2] = 'none';
        $tableau[3] = 'none';

        $this->activeBar = $tableau;

        if ($_SESSION['connected'] == TRUE && isset($_SESSION['connected'])) {
            if (isset($_SESSION['isAdmin']) && $_SESSION['isAdmin'] == 1) {

                $pdo_options[PDO::ATTR_ERRMODE] = PDO::ERRMODE_EXCEPTION;
                $bdd = new PDO(DSN, DB_USERNAME, DB_PASSWORD, $pdo_options);
//                $req = $bdd->query('SELECT M.email FROM members M, associatedPatientDoctor A WHERE M.id<>' . $_SESSION['idMember'] .
//                        ' AND A.idDoctor=' . $_SESSION['idMember'] .
//                        ' AND A.idMember<>M.id');

                $req = $bdd->query('select email from members M where M.id<>'. $_SESSION['idMember'] . ' AND M.id not in (select A.idMember from associatedPatientDoctor A where A.idDoctor=' . $_SESSION['idMember'] . ')');

                $tab = array();
                while ($data = $req->fetch()) {
                    $member = new Member($data['email']);
                    $tab[] = $member;
                }

                $this->tab = $tab;

                if (isset($_POST['patientName']) && $_POST['patientName'] != "-") {
                    $idNewMember = $_POST['patientName'];

                    $req = $bdd->prepare('INSERT INTO associatedPatientDoctor(idMember, idDoctor) VALUES(:idMember, :idDoctor)');

                    $req->execute(array(
                        ':idMember' => $idNewMember,
                        ':idDoctor' => $_SESSION['idMember']
                    ));

                    $this->redirect('/profile/view');
                }
            }
        }
    }

}

?>